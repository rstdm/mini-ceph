// Code generated by "enumer -type operationType -trimprefix operationType -text"; DO NOT EDIT.

package operationstate

import (
	"fmt"
)

const _operationTypeName = "CreateReadDelete"

var _operationTypeIndex = [...]uint8{0, 6, 10, 16}

func (i operationType) String() string {
	i -= 1
	if i < 0 || i >= operationType(len(_operationTypeIndex)-1) {
		return fmt.Sprintf("operationType(%d)", i+1)
	}
	return _operationTypeName[_operationTypeIndex[i]:_operationTypeIndex[i+1]]
}

var _operationTypeValues = []operationType{1, 2, 3}

var _operationTypeNameToValueMap = map[string]operationType{
	_operationTypeName[0:6]:   1,
	_operationTypeName[6:10]:  2,
	_operationTypeName[10:16]: 3,
}

// operationTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func operationTypeString(s string) (operationType, error) {
	if val, ok := _operationTypeNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to operationType values", s)
}

// operationTypeValues returns all values of the enum
func operationTypeValues() []operationType {
	return _operationTypeValues
}

// IsAoperationType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i operationType) IsAoperationType() bool {
	for _, v := range _operationTypeValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalText implements the encoding.TextMarshaler interface for operationType
func (i operationType) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for operationType
func (i *operationType) UnmarshalText(text []byte) error {
	var err error
	*i, err = operationTypeString(string(text))
	return err
}
